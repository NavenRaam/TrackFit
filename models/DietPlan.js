import mongoose from "mongoose";

// Sub-schema for individual meal details generated by Gemini
const MealSchema = new mongoose.Schema({
  id: { type: String, required: true }, // Unique ID for each generated meal (e.g., "b1", "l2", "d3")
  name: { type: String, required: true }, // e.g., "Breakfast", "Lunch", "Dinner", "Snack"
  dish: { type: String, required: true }, // e.g., "Oatmeal with Berries", "Grilled Chicken Salad"
  ingredients: { type: [String] }, // List of ingredients
  preparation: { type: String }, // Preparation instructions
  estimatedCalories: { type: Number, required: true },
  estimatedMacros: {
    protein: { type: Number, required: true },
    carbs: { type: Number, required: true },
    fats: { type: Number, required: true },
  },
}, { _id: false }); // No default _id for sub-documents to use our custom 'id'

// Sub-schema for a meal slot assignment within a scheduled day
const DailyMealAssignmentSchema = new mongoose.Schema({
  mealId: { type: String, ref: 'MealSchema' }, // References a meal from the 'mealPool' by its 'id'
  logged: { type: Boolean, default: false }, // True if the user logged this specific suggestion
  loggedAt: { type: Date }, // Timestamp when it was logged

  // Fields for custom user-entered meals
  customDish: { type: String },
  customIngredients: { type: [String] }, // For custom meals
  customPreparation: { type: String }, // For custom meals
  customCalories: { type: Number },
  customMacros: {
    protein: { type: Number },
    carbs: { type: Number },
    fats: { type: Number },
  },
}, { _id: false });

// Sub-schema for a single scheduled day in the current 3-day cycle
const ScheduledDaySchema = new mongoose.Schema({
  date: { type: String, required: true }, // YYYY-MM-DD format for the specific date
  dayOfWeek: { type: String, required: true }, // e.g., "Monday", "Tuesday"
  
  // Each meal slot can either reference a meal from the pool or be custom
  breakfast: DailyMealAssignmentSchema,
  lunch: DailyMealAssignmentSchema,
  dinner: DailyMealAssignmentSchema,
  snack1: DailyMealAssignmentSchema, // Optional snack slots
  snack2: DailyMealAssignmentSchema,
}, { _id: false });


// Main DietPlan Schema
const DietPlanSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  goal: { type: String, required: true }, // Fitness goal from UserProfile

  // The pool of ~15 unique meals generated by Gemini (5 Breakfast, 5 Lunch, 5 Dinner)
  mealPool: { type: [MealSchema], default: [] },

  // Array to track meal IDs that have been used recently to enforce the 7-day no-repeat rule
  // Stores { mealId: 'b1', usedDate: Date }
  recentlyUsedMealIds: { 
    type: [{
      mealId: { type: String, required: true },
      usedDate: { type: Date, required: true },
    }], 
    default: [],
  },

  // The actual 3-day schedule assigned to the user
  currentSchedule: { type: [ScheduledDaySchema], default: [] },

  lastPoolGenerationDate: { type: Date }, // When the 'mealPool' was last populated/refreshed by Gemini
  currentScheduleStartDate: { type: Date }, // When the 'currentSchedule' was last generated (start of a 3-day cycle)

  targetCalories: { type: Number }, // Overall daily target calories for the user
  targetMacros: { // Overall daily target macros for the user
    protein: { type: Number },
    carbs: { type: Number },
    fats: { type: Number },
  },

  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

// Update `updatedAt` on save
DietPlanSchema.pre("save", function (next) {
  this.updatedAt = Date.now();
  next();
});

const DietPlan =
  mongoose.models.DietPlan || mongoose.model("DietPlan", DietPlanSchema);

export default DietPlan;